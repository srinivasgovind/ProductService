MappedSuperClass => no table for parent class, but individual table for each child class. child class get the attribute from parent class,
and they become columns in child class table














Unidirectional
 @ManyToOne -> by default, pk fo 1[Category] side goes as fk into M[Product] side.
 @OneToMany -> by default, creates a mapping table.

 @JoinColumn with @OneToMany -> to specify pk of 1 side goes a fk into M side.
 convention for join column -> tableName_id FieldName

 Bidirectional
 1. No mapping table , PK of 1 side goes as FK of M side -> @JoinColumn(name = "tableName_id FieldName"
 2. Set the owning side of relationship -> mappedBy
 mappedBy -> owner side,  with the opposite side's owner attribute
 ex -> Product and Category, category is owner

 Category side
 @OneToMany(mappedBy = "categoryAttributeAtProductSide")
 private List<Product> product;

 ManyTOMany
 Unidirectional => nothing required, single mapping table is generated
 Bidirectional => mappedBy is required to generate single mapping table else, will generate 2 mapping tables.

 1. Create tables
 2. Insertion of data -> Save() -> upsert [insert and update]
